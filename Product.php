<?php

namespace App\Models;

use Filament\Panel;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Http;
use PhpParser\Node\Expr\Array_;

class Product extends Model
{
    use HasFactory;

    protected $guarded = ['id'];
    protected $casts = ['images' => 'array'];
    protected $table = 'products';

    public static function populate()
    {
        $skip = 0;
        $itemsPerRequest = 30;
        $hasMoreItems = true;

        while ($hasMoreItems) {
            $response = Http::get("https://dummyjson.com/products?skip={$skip}");
            $data = $response->json();

            if (empty($data['products'])) {
                $hasMoreItems = false;
                break;
            }

            foreach ($data['products'] as $product) {
                // Verifica se a categoria já existe, se não, cria uma nova.
                $category = Category::firstOrCreate(['name' => $product['category']], ['description' => 'Generated by API', 'is_active' => true]);

                // Verifica se o produto já existe para evitar duplicatas.
                $existingProduct = Product::where('title', $product['title'])->first();

                if (!$existingProduct) {
                    unset($product['id']); // Remove o 'id' que veio da API.
                    if($category->is_active){
                        // Adiciona o 'category_id' ao produto e cria-o.
                        $product['category_id'] = $category->id;
                        Product::create($product);
                    }
                    else{
                        printf("The product's category (%s) is in-active\n", $category->name);
                    }
                }
            }

            $skip += $itemsPerRequest;
        }
    }

    protected static function boot()
    {
        parent::boot();
        static::saving(function ($product) {

            if (is_null($product->images)) {
                $product->images = [];
            }
        });
    }
    /**
     * Acessor para o atributo 'images'.
     *
     * @return \Illuminate\Database\Eloquent\Casts\Attribute
     */
    protected function images(): Attribute
    {
        return Attribute::make(
            get: function ($value) {
                // Verifica se o valor é uma string não vazia
                if (is_string($value) && !empty($value)) {
                    // Tenta decodificar o JSON, se falhar, retorna o valor como array
                    $decoded = json_decode($value, true);
                    return $decoded ?: [$value];
                }

                // Se o valor já for um array ou null, retorna como está
                return $value ?? [];
            },
        );
    }

    public static function updateApi(Array $data, int $id)
    {
        $response = Http::put("https://dummyjson.com/products/{$id}", $data);
        return $response->json();
    }

    public static function destroyApi(int $id)
    {
        $response = Http::delete("https://dummyjson.com/products/{$id}");
        return $response->json();
    }
    public static function createApi(Array $data)
    {
        $response = Http::post('https://dummyjson.com/products/ad', $data);
        return $response->json();
    }


    public static function searchApi(string $query)
    {
        $response = Http::get("https://dummyjson.com/products/search?q=" . urlencode($query));
        return $response->json();
    }
    public static function getRatingAttribute($value)
    {
        return number_format($value, 1, '.', '');
    }
    public function category()
    {
        return $this->belongsTo(Category::class);
    }






}
